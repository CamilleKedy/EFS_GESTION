SET search_path TO projet;


-- Sch√©ma


DROP SCHEMA IF EXISTS projet CASCADE;
CREATE SCHEMA projet AUTHORIZATION projet;
GRANT ALL PRIVILEGES ON SCHEMA projet TO projet;


-- Tables


CREATE TABLE Profession(
   id_profession int GENERATED BY DEFAULT AS IDENTITY,
   libelle VARCHAR(50) NOT NULL,
   PRIMARY KEY(id_profession)
);

CREATE TABLE Personnel(
   id_personnel int GENERATED BY DEFAULT AS IDENTITY,
   nom VARCHAR(50) NOT NULL,
   prenom VARCHAR(50) NOT NULL,
   adresse VARCHAR(50) NOT NULL,
   id_profession INT NOT NULL,
   
   PRIMARY KEY(id_personnel),
   FOREIGN KEY(id_profession) REFERENCES Profession(id_profession)
);


CREATE TABLE Donneur(
   id_donneur int GENERATED BY DEFAULT AS IDENTITY,
   nom_donneur VARCHAR(50) NOT NULL,
   prenom_donneur VARCHAR(50) NOT NULL,
   date_naissance DATE NOT null check(date_naissance- current_date <= 18),
   ville_donneur VARCHAR(50) NOT NULL,
   adresse_donneur VARCHAR(50) NOT NULL,
   demande_carte CHAR(3) NOT null check(demande_carte in ('oui','non')) ,
   PRIMARY KEY(id_donneur)
);

CREATE TABLE Site_de_collecte(
   id_site int GENERATED BY DEFAULT AS IDENTITY,
   ville VARCHAR(50) NOT NULL,
   nbr_lits INT,
   adresse VARCHAR(100) NOT NULL,
   PRIMARY KEY(id_site)
);

CREATE TABLE Connexion(
   IdConnexion  int GENERATED BY DEFAULT AS IDENTITY ,
   login VARCHAR(50) NOT NULL,
   motDePasse VARCHAR(15) NOT NULL,
   role VARCHAR(15) NOT NULL,
   id_personnel INT /*NOT NULL*/,
   PRIMARY KEY(IdConnexion),
   FOREIGN KEY(id_personnel) REFERENCES Personnel(id_personnel)
);

CREATE TABLE dossierMedical(
   id_dossier  int GENERATED BY DEFAULT AS IDENTITY,
   groupe_sanguin VARCHAR(3) NOT null  check(groupe_sanguin in ('A','AB','B','O')),
   rhesus VARCHAR(10),
   poids DOUBLE PRECISION NOT NULL,
   inaptitude_temporaire VARCHAR(50),
   id_donneur INT /*NOT NULL*/,
   PRIMARY KEY(id_dossier),
   UNIQUE(id_donneur),
   FOREIGN KEY(id_donneur) REFERENCES Donneur(id_donneur)
);

CREATE TABLE Materiel(
   id_materiel int GENERATED BY DEFAULT AS IDENTITY,
   nom_materiel VARCHAR(20) NOT NULL,
   PRIMARY KEY(id_materiel)
);

CREATE TABLE Collecte(
   id_collecte int GENERATED BY DEFAULT AS IDENTITY,
   qte_collation INT NOT null check( qte_collation >=0),
   date_debut DATE NOT null check(date_debut > CURRENT_DATE),
   date_fin DATE NOT null check(date_fin >= date_debut),
   nbre_infirmiers INT not null,
   nbre_medecins INT not null,
   nbre_secretaire INT not null,
   nbre_agents_collation INT not null,
   horaire_debut TIME NOT NULL,
   horaire_fin TIME check(horaire_fin > horaire_debut),
   id_site INT /*NOT NULL*/,
   PRIMARY KEY(id_collecte),
   FOREIGN KEY(id_site) REFERENCES Site_de_collecte(id_site)
);

CREATE TABLE RDV(
   id_rdv  int GENERATED BY DEFAULT AS IDENTITY,
   heure_rdv TIME NOT NULL,
   prise_de_sang CHAR(3) NOT NULL,
   date_rdv DATE NOT NULL,
   qte_sang_donnee DECIMAL(15,2),
   id_collecte INT /*NOT NULL*/,
   id_donneur INT /*NOT NULL*/,
   PRIMARY KEY(id_rdv),
   FOREIGN KEY(id_collecte) REFERENCES Collecte(id_collecte),
   FOREIGN KEY(id_donneur) REFERENCES Donneur(id_donneur),
   check (prise_de_sang in ('oui', 'non'))
  
);

CREATE TABLE personnelDeCollecte(
   id_personnel INT GENERATED BY DEFAULT AS IDENTITY,
   id_collecte INT GENERATED BY DEFAULT AS IDENTITY,
   PRIMARY KEY(id_personnel, id_collecte),
   FOREIGN KEY(id_personnel) REFERENCES Personnel(id_personnel),
   FOREIGN KEY(id_collecte) REFERENCES Collecte(id_collecte)
);

CREATE TABLE materielDeCollecte(
   id_collecte INT GENERATED BY DEFAULT AS IDENTITY,
   id_materiel INT GENERATED BY DEFAULT AS IDENTITY,
   quantite INT,
   PRIMARY KEY(id_collecte, id_materiel),
   FOREIGN KEY(id_collecte) REFERENCES Collecte(id_collecte),
   FOREIGN KEY(id_materiel) REFERENCES Materiel(id_materiel)
);



